package ui;

import desktop.DesktopUi;
import image.ShowImages;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.text.JTextComponent;
import search.EnglishDictionary;
import search.PositionWord;
import search.SearchSuggest;
import tools.ChangeComponentsColor;
import tools.ColorDialog;
import tools.ControlView;
import tools.ConventToColumns;
import tools.Exit;
import tools.FontChooser;
import tools.HistoryMenu;
import tools.RandomColor;
import tools.NewView;
import tools.SendView;
import verbforms.VerbForms;

public class SpellingHelperUI extends javax.swing.JFrame {

    // =========== constructor ==============
    public SpellingHelperUI() {

        initComponents();


        // remove unuse functions
        imageBu.setVisible(false);
        speechBu.setVisible(false);
        newViewBu.setVisible(false);
        sentEnDicBu.setVisible(false);
        historyMenu.setVisible(false);
        desktopMi.setVisible(false);
        usageTypeRa.setVisible(false);
        enTypeRa.setVisible(false);
        suggestWordsTf.setVisible(false);
        suggestWordsBu.setVisible(false);
        resizeMi.setVisible(false);



        // default behaviour
        dicTypeRa.setSelected(true);
        showMiddlePanelCk.setSelected(true);




        //=========== = set font face radios ============
        String[] fontFace = new String[]{"Arial", "Candara", "Cataneo BT", "Century Gothic",
            "Courier", "DokChampa", "Eurostile", "Eurostile",
            "Georgia", "Helvetica", "Lucida Sans", "Nina", "Serif", "Tahoma", "Vrinda"};
        JRadioButtonMenuItem tempRa;
        RadioFontFaceListener rl = new RadioFontFaceListener();
        for (int i = 0; i < fontFace.length; i++) {
            tempRa = new JRadioButtonMenuItem(fontFace[i]);
            tempRa.addActionListener(rl);
            fontFaceMenu.add(tempRa);
            fontFaceRaGroup.add(tempRa); // radioGroup
        }
        // startStringeTf,midStringTf,midOrderStringTf,endStringTf,regStringTf,
        // ========== assign short on text field ===========
        startLa.setDisplayedMnemonic('s');
        startLa.setLabelFor(startStringTf);

        middleLa.setDisplayedMnemonic('m');
        middleLa.setLabelFor(midOrderStringTf);

        lettersLa.setDisplayedMnemonic('l');
        lettersLa.setLabelFor(midStringTf);

        endLa.setDisplayedMnemonic('e');
        endLa.setLabelFor(endStringTf);

        taOne.setBackground(RandomColor.getLight());
        taBgColor = taOne.getBackground();
        taFgColor = taOne.getForeground();

        //enTypeRa.setSelected(true);
        optionPanel.setVisible(true);

        startStringTf.grabFocus();

        try {
            setIconImage(ImageIO.read(new File("icon.png")));
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //========== RadioFontFaceListener ======
    class RadioFontFaceListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            String fontFaceSt = (String) e.getActionCommand();
            // get font face

            Font f = taOne.getFont();
            Font newFont = new Font(fontFaceSt, f.getStyle(), f.getSize());
            taOne.setFont(newFont);
        }
    }//RadioFontFaceListener//

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeRaGroup = new javax.swing.ButtonGroup();
        fontFaceRaGroup = new javax.swing.ButtonGroup();
        optionPanel = new javax.swing.JPanel();
        tfFontSizeSlider = new javax.swing.JSlider();
        taFontSizeSlider = new javax.swing.JSlider();
        exactLenCb = new javax.swing.JComboBox();
        greatLenCb = new javax.swing.JComboBox();
        lessLenCb = new javax.swing.JComboBox();
        imageBu = new javax.swing.JButton();
        speechBu = new javax.swing.JButton();
        newViewBu = new javax.swing.JButton();
        sentEnDicBu = new javax.swing.JButton();
        columnsCb = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        taOne = new javax.swing.JTextArea();
        TpOne = new javax.swing.JTabbedPane();
        normalPanel = new javax.swing.JPanel();
        endStringTf = new javax.swing.JTextField();
        endLa = new javax.swing.JLabel();
        lettersLa = new javax.swing.JLabel();
        midStringTf = new javax.swing.JTextField();
        midOrderStringTf = new javax.swing.JTextField();
        middleLa = new javax.swing.JLabel();
        startLa = new javax.swing.JLabel();
        startStringTf = new javax.swing.JTextField();
        regexPanel = new javax.swing.JPanel();
        regStringTf = new javax.swing.JTextField();
        regBu = new javax.swing.JButton();
        suggestWordsTf = new javax.swing.JTextField();
        suggestWordsBu = new javax.swing.JButton();
        regexHelpBu = new javax.swing.JButton();
        verbFormsBu = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        optionMenu = new javax.swing.JMenu();
        showMiddlePanelCk = new javax.swing.JCheckBoxMenuItem();
        colorViewCk = new javax.swing.JCheckBoxMenuItem();
        alwayOnTopCk = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        desktopMi = new javax.swing.JMenuItem();
        resizeMi = new javax.swing.JMenuItem();
        clearMi = new javax.swing.JMenuItem();
        helpMi = new javax.swing.JMenuItem();
        colorDialogMi = new javax.swing.JMenuItem();
        colorFgDiologMi = new javax.swing.JMenuItem();
        allColorDialogMi = new javax.swing.JMenuItem();
        typeMenu = new javax.swing.JMenu();
        dicTypeRa = new javax.swing.JRadioButtonMenuItem();
        enTypeRa = new javax.swing.JRadioButtonMenuItem();
        wikiTypeRa = new javax.swing.JRadioButtonMenuItem();
        usageTypeRa = new javax.swing.JRadioButtonMenuItem();
        fontFaceMenu = new javax.swing.JMenu();
        fontChooserMi = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        historyMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("::: Helper :::");

        tfFontSizeSlider.setMaximum(75);
        tfFontSizeSlider.setMinimum(12);
        tfFontSizeSlider.setValue(20);
        tfFontSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tfFontSizeSliderStateChanged(evt);
            }
        });

        taFontSizeSlider.setMaximum(75);
        taFontSizeSlider.setMinimum(12);
        taFontSizeSlider.setToolTipText("textarea font size");
        taFontSizeSlider.setValue(20);
        taFontSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                taFontSizeSliderStateChanged(evt);
            }
        });

        exactLenCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14" }));
        exactLenCb.setToolTipText("extact same lenght");
        exactLenCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                exactLenCbItemStateChanged(evt);
            }
        });

        greatLenCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14" }));
        greatLenCb.setToolTipText("greater than");
        greatLenCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                exactLenCbItemStateChanged(evt);
            }
        });

        lessLenCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14" }));
        lessLenCb.setToolTipText("less than");
        lessLenCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                exactLenCbItemStateChanged(evt);
            }
        });

        imageBu.setText("image");
        imageBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageBuActionPerformed(evt);
            }
        });

        speechBu.setText("speech");
        speechBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speechBuActionPerformed(evt);
            }
        });

        newViewBu.setText("view");
        newViewBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newViewBuActionPerformed(evt);
            }
        });

        sentEnDicBu.setText("en");
        sentEnDicBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sentEnDicBuActionPerformed(evt);
            }
        });

        columnsCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "cols", "2", "3", "4", "5", "6" }));
        columnsCb.setToolTipText("columns");
        columnsCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                columnsCbItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(optionPanelLayout.createSequentialGroup()
                        .addComponent(imageBu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speechBu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newViewBu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sentEnDicBu, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                    .addGroup(optionPanelLayout.createSequentialGroup()
                        .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfFontSizeSlider, 0, 0, Short.MAX_VALUE)
                            .addComponent(exactLenCb, 0, 82, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(taFontSizeSlider, 0, 0, Short.MAX_VALUE)
                            .addComponent(greatLenCb, 0, 78, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(columnsCb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lessLenCb, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfFontSizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(taFontSizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(columnsCb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exactLenCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(greatLenCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lessLenCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageBu)
                    .addComponent(newViewBu)
                    .addComponent(sentEnDicBu)
                    .addComponent(speechBu, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        taOne.setBackground(new java.awt.Color(153, 255, 153));
        taOne.setColumns(20);
        taOne.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        taOne.setLineWrap(true);
        taOne.setRows(5);
        taOne.setWrapStyleWord(true);
        taOne.setBorder(null);
        taOne.setSelectedTextColor(new java.awt.Color(0, 0, 102));
        taOne.setSelectionColor(new java.awt.Color(51, 255, 255));
        taOne.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taOneMouseClicked(evt);
            }
        });
        taOne.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taOneKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(taOne);

        normalPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));

        endStringTf.setBackground(new java.awt.Color(204, 255, 204));
        endStringTf.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        endStringTf.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        endStringTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                endStringTfKeyReleased(evt);
            }
        });

        endLa.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        endLa.setText("E");

        lettersLa.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lettersLa.setText("L");

        midStringTf.setBackground(new java.awt.Color(204, 255, 255));
        midStringTf.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        midStringTf.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        midStringTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                midStringTfKeyReleased(evt);
            }
        });

        midOrderStringTf.setBackground(new java.awt.Color(255, 255, 153));
        midOrderStringTf.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        midOrderStringTf.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        midOrderStringTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                midOrderStringTfKeyReleased(evt);
            }
        });

        middleLa.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        middleLa.setText("M");

        startLa.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        startLa.setText("S");

        startStringTf.setBackground(new java.awt.Color(255, 204, 204));
        startStringTf.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        startStringTf.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        startStringTf.setPreferredSize(new java.awt.Dimension(94, 28));
        startStringTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                startStringTfKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout normalPanelLayout = new javax.swing.GroupLayout(normalPanel);
        normalPanel.setLayout(normalPanelLayout);
        normalPanelLayout.setHorizontalGroup(
            normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, normalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startLa)
                    .addComponent(middleLa)
                    .addComponent(lettersLa)
                    .addComponent(endLa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(midOrderStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(startStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(midStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(endStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                .addContainerGap())
        );
        normalPanelLayout.setVerticalGroup(
            normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(normalPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startLa)
                    .addComponent(startStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(middleLa)
                    .addComponent(midOrderStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lettersLa)
                    .addComponent(midStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(normalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endLa)
                    .addComponent(endStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap())
        );

        TpOne.addTab("     normal     ", normalPanel);

        regexPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 255)));

        regStringTf.setBackground(new java.awt.Color(255, 255, 102));
        regStringTf.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        regStringTf.setForeground(new java.awt.Color(0, 0, 102));

        regBu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        regBu.setText("regex");
        regBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regBuActionPerformed(evt);
            }
        });

        suggestWordsTf.setBackground(new java.awt.Color(204, 255, 255));
        suggestWordsTf.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        suggestWordsTf.setForeground(new java.awt.Color(0, 51, 255));
        suggestWordsTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                suggestWordsTfKeyReleased(evt);
            }
        });

        suggestWordsBu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        suggestWordsBu.setText("suggestion");
        suggestWordsBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggestWordsBuActionPerformed(evt);
            }
        });

        regexHelpBu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        regexHelpBu.setText("help");
        regexHelpBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regexHelpBuActionPerformed(evt);
            }
        });

        verbFormsBu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        verbFormsBu.setText("verb");
        verbFormsBu.setActionCommand("jButton1");
        verbFormsBu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verbFormsBuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout regexPanelLayout = new javax.swing.GroupLayout(regexPanel);
        regexPanel.setLayout(regexPanelLayout);
        regexPanelLayout.setHorizontalGroup(
            regexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regexPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(regexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(suggestWordsTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(regStringTf, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addGroup(regexPanelLayout.createSequentialGroup()
                        .addComponent(regBu, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(regexHelpBu, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(verbFormsBu, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(suggestWordsBu, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        regexPanelLayout.setVerticalGroup(
            regexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regexPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(suggestWordsTf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suggestWordsBu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regStringTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(regexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(regBu)
                        .addComponent(regexHelpBu))
                    .addComponent(verbFormsBu))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        TpOne.addTab("Regex", regexPanel);

        optionMenu.setMnemonic('o');
        optionMenu.setText("option");
        optionMenu.setActionCommand("Menu1");

        showMiddlePanelCk.setMnemonic('s');
        showMiddlePanelCk.setText("show middle");
        showMiddlePanelCk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMiddlePanelCkActionPerformed(evt);
            }
        });
        optionMenu.add(showMiddlePanelCk);

        colorViewCk.setMnemonic('c');
        colorViewCk.setText("color highlight");
        colorViewCk.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                colorViewCkStateChanged(evt);
            }
        });
        optionMenu.add(colorViewCk);

        alwayOnTopCk.setMnemonic('a');
        alwayOnTopCk.setText("alway on top");
        alwayOnTopCk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alwayOnTopCkActionPerformed(evt);
            }
        });
        optionMenu.add(alwayOnTopCk);
        optionMenu.add(jSeparator1);

        desktopMi.setText("desktop");
        desktopMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desktopMiActionPerformed(evt);
            }
        });
        optionMenu.add(desktopMi);

        resizeMi.setText("resize");
        resizeMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeMiActionPerformed(evt);
            }
        });
        optionMenu.add(resizeMi);

        clearMi.setText("clear");
        clearMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMiActionPerformed(evt);
            }
        });
        optionMenu.add(clearMi);

        helpMi.setText("help");
        helpMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMiActionPerformed(evt);
            }
        });
        optionMenu.add(helpMi);

        colorDialogMi.setText("bg color");
        colorDialogMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorDialogMiActionPerformed(evt);
            }
        });
        optionMenu.add(colorDialogMi);

        colorFgDiologMi.setText("text color");
        colorFgDiologMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorFgDiologMiActionPerformed(evt);
            }
        });
        optionMenu.add(colorFgDiologMi);

        allColorDialogMi.setText("all color");
        allColorDialogMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allColorDialogMiActionPerformed(evt);
            }
        });
        optionMenu.add(allColorDialogMi);

        jMenuBar1.add(optionMenu);

        typeMenu.setMnemonic('t');
        typeMenu.setText("type");

        modeRaGroup.add(dicTypeRa);
        dicTypeRa.setMnemonic('d');
        dicTypeRa.setText("dic");
        dicTypeRa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dicTypeRaActionPerformed(evt);
            }
        });
        typeMenu.add(dicTypeRa);

        modeRaGroup.add(enTypeRa);
        enTypeRa.setMnemonic('e');
        enTypeRa.setText("en");
        enTypeRa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enTypeRaActionPerformed(evt);
            }
        });
        typeMenu.add(enTypeRa);

        modeRaGroup.add(wikiTypeRa);
        wikiTypeRa.setText("wiki");
        wikiTypeRa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wikiTypeRaActionPerformed(evt);
            }
        });
        typeMenu.add(wikiTypeRa);

        modeRaGroup.add(usageTypeRa);
        usageTypeRa.setMnemonic('u');
        usageTypeRa.setText("usage");
        usageTypeRa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dicTypeRaActionPerformed(evt);
            }
        });
        typeMenu.add(usageTypeRa);

        jMenuBar1.add(typeMenu);

        fontFaceMenu.setMnemonic('f');
        fontFaceMenu.setText("font");

        fontChooserMi.setMnemonic('c');
        fontChooserMi.setText("chooser");
        fontChooserMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontChooserMiActionPerformed(evt);
            }
        });
        fontFaceMenu.add(fontChooserMi);
        fontFaceMenu.add(jSeparator2);

        jMenuBar1.add(fontFaceMenu);

        historyMenu.setMnemonic('h');
        historyMenu.setText("history");
        jMenuBar1.add(historyMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(TpOne, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(optionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TpOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void wikiTypeRaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wikiTypeRaActionPerformed
        startSearch();
    }//GEN-LAST:event_wikiTypeRaActionPerformed

    private void suggestWordsTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_suggestWordsTfKeyReleased
        int keyCode = evt.getKeyCode();

        if (keyCode == evt.VK_ESCAPE) // esc key
        {
            suggestWordsTf.setText("");
        } //else if (keyCode == evt.VK_ENTER){ // enter key
        else {
            String word = suggestWordsTf.getText();
            if (!word.equals("")) {
                displayOnTextArea(SearchSuggest.getWords(word));
            }

        }

    }//GEN-LAST:event_suggestWordsTfKeyReleased

    private void suggestWordsBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggestWordsBuActionPerformed
        String word = suggestWordsTf.getText();
        if (!word.equals("")) {
            displayOnTextArea(SearchSuggest.getWords(word));
        }
    }//GEN-LAST:event_suggestWordsBuActionPerformed

    private void desktopMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desktopMiActionPerformed
        setVisible(false);
        DesktopUi.main(null);
    }//GEN-LAST:event_desktopMiActionPerformed

    private void fontChooserMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontChooserMiActionPerformed
// TODO add your handling code here:
        FontChooser fc = new FontChooser(new Frame());
        fc.setVisible(true);
        Font myNewFont = fc.getSelectedFont();

        if (myNewFont != null) {
            taOne.setFont(myNewFont);
        }

    }//GEN-LAST:event_fontChooserMiActionPerformed

    private void colorViewCkStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_colorViewCkStateChanged
// TODO add your handling code here:
        if (colorViewCk.isSelected()) {
            colorView = new HtmlViewer();
            JEditorPane pa = colorView.getPane();

            // key listner , add short cut
            pa.addKeyListener(new java.awt.event.KeyAdapter() {

                public void keyReleased(java.awt.event.KeyEvent evt) {
                    shortCut(evt);
                }
            });

            jScrollPane1.setViewportView(pa);
            startSearch();

        } else {
            colorView = null;
            jScrollPane1.setViewportView(taOne);
        }
    }//GEN-LAST:event_colorViewCkStateChanged

    private void clearMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMiActionPerformed
        reset();
    }//GEN-LAST:event_clearMiActionPerformed

    private void helpMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMiActionPerformed
        NewView.display(Help.getHelpString(), 12, 25, 15);
    }//GEN-LAST:event_helpMiActionPerformed

    private void columnsCbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_columnsCbItemStateChanged
        startSearch();
    }//GEN-LAST:event_columnsCbItemStateChanged

    private void taOneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taOneMouseClicked
        dictionaryViewMouseClick(evt.getButton()); // fire dictionary view
    }//GEN-LAST:event_taOneMouseClicked

    private void regexHelpBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexHelpBuActionPerformed
        NewView.display(Help.getRegexString());
        // regex help
    }//GEN-LAST:event_regexHelpBuActionPerformed

    private void showMiddlePanelCkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMiddlePanelCkActionPerformed

        if (showMiddlePanelCk.isSelected()) {
            optionPanel.setVisible(true);
        } else {
            optionPanel.setVisible(false);
        }


    }//GEN-LAST:event_showMiddlePanelCkActionPerformed

    private void allColorDialogMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allColorDialogMiActionPerformed
        // Change Components Color
        taBgColor = ChangeComponentsColor.changeAll(getComponents());
    }//GEN-LAST:event_allColorDialogMiActionPerformed

    private void resizeMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeMiActionPerformed
// TODO add your handling code here:
        setSize(750, getHeight());
    }//GEN-LAST:event_resizeMiActionPerformed

    private void enTypeRaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enTypeRaActionPerformed
        startSearch();
    }//GEN-LAST:event_enTypeRaActionPerformed

    private void sentEnDicBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sentEnDicBuActionPerformed
        searchEngDic();
    }//GEN-LAST:event_sentEnDicBuActionPerformed

    private void newViewBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newViewBuActionPerformed
        createNewView();
    }//GEN-LAST:event_newViewBuActionPerformed

    private void colorFgDiologMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorFgDiologMiActionPerformed
        showFgColorDialog();
    }//GEN-LAST:event_colorFgDiologMiActionPerformed

    private void speechBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speechBuActionPerformed
        // copy select string to clipboard and
        // open The Sage dictionary
        String selectSt = taOne.getSelectedText();
        if (selectSt != null && !selectSt.equals("")) {
            Speech.run(selectSt);
        }
        taOne.grabFocus();
    }//GEN-LAST:event_speechBuActionPerformed

    private void dicTypeRaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dicTypeRaActionPerformed

        startSearch();
    }//GEN-LAST:event_dicTypeRaActionPerformed

    private void alwayOnTopCkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alwayOnTopCkActionPerformed

        if (alwayOnTopCk.isSelected()) {
            setAlwaysOnTop(true);
        } else {
            setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_alwayOnTopCkActionPerformed

    private void colorDialogMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorDialogMiActionPerformed
        showColorDialog();
    }//GEN-LAST:event_colorDialogMiActionPerformed

    private void regBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regBuActionPerformed

        startSearch();
    }//GEN-LAST:event_regBuActionPerformed

    private void taOneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taOneKeyReleased
        int keyCode = evt.getKeyCode();

        if (keyCode == evt.VK_F12) // F12
        {
            startStringTf.grabFocus();
        } else if (keyCode == evt.VK_F5) // F5
        {
            searchEngDic();
        } else {
            shortCut(evt);
        }
    }//GEN-LAST:event_taOneKeyReleased

    private void endStringTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_endStringTfKeyReleased

        if (shortCut(evt)) {
            textFieldShortCut(evt);
        }

    }//GEN-LAST:event_endStringTfKeyReleased

    private void midStringTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_midStringTfKeyReleased

        if (!midStringTf.getText().isEmpty()) {
            midOrderStringTf.setText("");
        }

        if (shortCut(evt)) {
            textFieldShortCut(evt);
        }
    }//GEN-LAST:event_midStringTfKeyReleased

    private void midOrderStringTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_midOrderStringTfKeyReleased

        if (!midOrderStringTf.getText().isEmpty()) {
            midStringTf.setText("");
        }

        if (shortCut(evt)) {
            textFieldShortCut(evt);
        }
    }//GEN-LAST:event_midOrderStringTfKeyReleased

    private void startStringTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startStringTfKeyReleased

        if (shortCut(evt)) {
            textFieldShortCut(evt);
        }
    }//GEN-LAST:event_startStringTfKeyReleased

    // =========== short cut on text fields ==========
    private void textFieldShortCut(java.awt.event.KeyEvent evt) {

        int keycode = evt.getKeyCode();

        switch (keycode) {

            case 38:
            case 40: // up and down key
                JTextField[] tfArr = new JTextField[]{startStringTf, midOrderStringTf, midStringTf, endStringTf};
                JTextField tf = (JTextField) evt.getSource();
                for (int i = 0; i < tfArr.length; i++) {
                    if (tf == tfArr[i]) // if same reference
                    {
                        if (evt.VK_UP == keycode && i != 0) // go up
                        {
                            tfArr[i - 1].grabFocus();
                        } else if (evt.VK_DOWN == keycode && i != tfArr.length - 1) // go down
                        {
                            tfArr[i + 1].grabFocus();
                        }
                    }
                }
                break;
            case 123:
                taOne.grabFocus();
                break;  // F12
            case 10:
                searchEngDic();
                break;

            default:
                startSearch();

        }

    }

    private void exactLenCbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_exactLenCbItemStateChanged
        lenComboxReset(evt);
        startSearch();
    }//GEN-LAST:event_exactLenCbItemStateChanged

    private void taFontSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_taFontSizeSliderStateChanged
        int size = taFontSizeSlider.getValue();
        //System.out.println(size);
        Font f = taOne.getFont();
        Font newFont = new Font(f.getFamily(), f.getStyle(), size);
        taOne.setFont(newFont);

        if (colorViewCk.isSelected()) {
            startSearch();
        }

    }//GEN-LAST:event_taFontSizeSliderStateChanged

    private void tfFontSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tfFontSizeSliderStateChanged
        int size = tfFontSizeSlider.getValue();
        Font tfFont = startStringTf.getFont();
        Font newFont = new Font(tfFont.getFamily(), tfFont.getStyle(), size);

        Component[] coms = new Component[]{startStringTf, midOrderStringTf, midStringTf, endStringTf, startLa,
            middleLa, lettersLa, endLa};

        for (int i = 0; i < coms.length; i++) {
            coms[i].setFont(newFont);
        }
    }//GEN-LAST:event_tfFontSizeSliderStateChanged

    private void imageBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageBuActionPerformed
        // TODO add your handling code here:
        String taSt = taOne.getText();
        if (taSt != null && !taSt.equals("") && !taSt.contains("not match")) {
            ShowImages.run(taSt);
        }
    }//GEN-LAST:event_imageBuActionPerformed

    private void verbFormsBuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verbFormsBuActionPerformed

        VerbForms vf = new VerbForms();
        String st = regStringTf.getText();
        if (!st.isEmpty()) {
            taOne.setText(vf.search(st));
        }
    }//GEN-LAST:event_verbFormsBuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        // if pass argument then run system gui
        if (args.length != 0) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SpellingHelperUI().setVisible(true);
            }
        });

        if (args.length != 0 && args[0].contains("exit")) {
            Exit.close(5);
        }
    }

    // ======================= collectInfo() =========================
    Info collectInfo() {
        String start = startStringTf.getText();
        String mid = midStringTf.getText();
        String midOrder = midOrderStringTf.getText();
        String end = endStringTf.getText();
        String regSt = regStringTf.getText();
        String datatype = getDataType();

        int exactLen = 0;
        if (exactLenCb.getSelectedIndex() != 0) {
            exactLen = Integer.valueOf(exactLenCb.getSelectedItem().toString());
        }

        int greatLen = 0;
        if (greatLenCb.getSelectedIndex() != 0) {
            greatLen = Integer.valueOf(greatLenCb.getSelectedItem().toString());
        }

        int lessLen = 0;
        if (lessLenCb.getSelectedIndex() != 0) {
            lessLen = Integer.valueOf(lessLenCb.getSelectedItem().toString());
        }

        int columns = 0;
        if (columnsCb.getSelectedIndex() != 0) {
            columns = Integer.valueOf(columnsCb.getSelectedItem().toString());
        }

        int taFontSize = taFontSizeSlider.getValue();

        return new Info(start, mid, midOrder, end, exactLen, greatLen, lessLen, regSt, datatype, columns, taFontSize);
    }

    // -------- getDataType() ----------------------
    String getDataType() {
        String datatype = "dic";

        if (dicTypeRa.isSelected()) {
            datatype = "dic";
        } else if (enTypeRa.isSelected()) {
            datatype = "words";
        } else if (wikiTypeRa.isSelected()) {
            datatype = "wiki";
        } else if (usageTypeRa.isSelected()) {
            datatype = "usage";
        }

        return datatype;
    }

    void lenComboxReset(ItemEvent e) {
        JComboBox[] cb = new JComboBox[]{exactLenCb, greatLenCb, lessLenCb};

        for (int i = 0; i < cb.length; i++) {
            if (cb[i] != (JComboBox) e.getSource()) {
                cb[i].setSelectedIndex(0);
            }
        }
    }

    // ------------- reset()----------------
    void reset() {

        JComboBox[] cb = new JComboBox[]{exactLenCb, greatLenCb, lessLenCb};

        for (int i = 0; i < cb.length; i++) {
            cb[i].setSelectedIndex(0);  // set all combox index 0
        }
        JTextComponent[] tc = new JTextComponent[]{
            startStringTf, midStringTf, midOrderStringTf, endStringTf, regStringTf, taOne
        };

        for (int i = 0; i < tc.length; i++) {
            tc[i].setText("");
        }

        if (TpOne.getSelectedIndex() == 0) // if in normal search
        {
            startStringTf.grabFocus();
        }
    }

    // ==================== shortCut()==========================================
    boolean shortCut(KeyEvent e) {

        boolean contin = false;  // continute statements
        int keyCode = e.getKeyCode();

        switch (keyCode) {

            case 27:
                reset();
                break; // escape

            case 119: // F8 close midlle panel

                if (optionPanel.isVisible()) {
                    optionPanel.setVisible(false);
                } else {
                    optionPanel.setVisible(true);
                }
                break;

            case 112:
                dicTypeRa.setSelected(true);
                startSearch();
                break; // F1

            case 113:
                enTypeRa.setSelected(true);
                startSearch();
                break; // F2

            case 114:
                wikiTypeRa.setSelected(true);
                startSearch();
                break; // F3

            case 115:
                usageTypeRa.setSelected(true);
                startSearch();
                break; // F4

            case 118: // F7  color view
                if (colorViewCk.isSelected()) {
                    colorViewCk.setSelected(false);
                } else {
                    colorViewCk.setSelected(true);
                }
                break;

            default:
                contin = true;
        }

        return contin;
    }

    // ========= searchEngDic =================
    protected void searchEngDic() {
        // if press enter key start search dictionary

        // copy text textarea and search dic
        String word = taOne.getSelectedText(); // if not select return null
        String st = taOne.getText();
        int cursorPos = taOne.getCaretPosition();

        // if no word is selected
        if (word == null && !st.isEmpty()) {
            if (cursorPos == 0) {
                word = PositionWord.getSecondLine(st);
            } else // if textarea on focus
            {
                word = PositionWord.get(cursorPos, st);
            }
        }

        searchFromEnDic(word);
        startStringTf.grabFocus();
    }

    // ======================== startSearch()=======================
    void startSearch() {

        // which tab
        if (TpOne.getSelectedIndex() == 0) {
            normalSearch();
        } else {
            regexSearch();
        }
    }

    // ===================== normalSearch =====================
    void normalSearch() {
        Info coll = collectInfo();

        if (!coll.isNormalSearchEmpty()) {
            String st = dloc.normalSearch(coll);

            // ==== convert to columns ==========
            if (coll.columns != 0 && !st.contains("not match") && colorView == null) {
                st = ConventToColumns.toTab(st, 3, coll);

                Font f = taOne.getFont();
                Font newFont = new Font("Courier", f.getStyle(), f.getSize());
                taOne.setFont(newFont);
            }

            // ==== color viewer =====
            if (colorView != null) // if color view is on
            {
                colorView.pass(st, coll);  // pass the string to Editor pane
            }
            displayOnTextArea(st);  // print text on text area
        }
    }

    // ==================== regex search ===============================
    void regexSearch() {

        if (regStringTf.getText().length() != 0) {
            String st = dloc.regexSearch(collectInfo());
            displayOnTextArea(st);
        }
    }

    // ======================displayOnTextArea==================================
    void displayOnTextArea(String st) {

        taOne.setText(st);
        taOne.setCaretPosition(0); // move scorll to top

        if (st.equals("not match")) {
            Toolkit.getDefaultToolkit().beep();
            taOne.setBackground(Color.RED);
        } else {
            taOne.setBackground(taBgColor);
        }

    }

    // ====================== showColorDialog() ====================================
    void showFgColorDialog() {
        Color bgColor = ColorDialog.getColor();
        if (bgColor != null) {
            taFgColor = bgColor;
            taOne.setForeground(bgColor);

        }
    }

    // ====================== showColorDialog() ====================================
    void showColorDialog() {
        Color bgColor = ColorDialog.getColor();
        if (bgColor != null) {
            taBgColor = bgColor;
            taOne.setBackground(bgColor);
        }
    }

    // ======================  createNewView() ====================================
    void createNewView() {
        SendView sv = new SendView(jScrollPane1);
    }

    // ====================== searchFromEnDic ========================
    protected void searchFromEnDic(String word) {
        if (word != null && (!word.isEmpty())) {

            String explain = EnglishDictionary.get(word);

            // add item on HistoryMenu
            if (!explain.contains("not match")) {
                HistoryMenu.addItem(historyMenu, word, new HistroyItemsListener());
            }

            // display at other window
            if (enDicView != null && enDicView.isVisible()) {
                enDicView.display(explain);
            } else {
                displayOnTextArea(explain);
            }
        }
    }

    //========== HistroyItemsListener
    public class HistroyItemsListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            // read item text and search in dictionary
            String word = (String) e.getActionCommand();
            searchFromEnDic(word);
        }
    }//RunBuListener//

    // =========== show dictionary in separate window
    protected void dictionaryViewMouseClick(int click) {
        if (click == 3) {  // right click

            if (enDicView == null) {
                enDicView = new ControlView(15, 43, 18);
            } else if (!enDicView.isVisible()) {
                enDicView.setVisible(true);
            }

            searchEngDic();
            taOne.grabFocus();
        }
    }
    protected HtmlViewer colorView = null;
    protected DicLogic dloc = new DicLogic();
    protected Color taBgColor;
    protected Color taFgColor;
    protected ControlView enDicView;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTabbedPane TpOne;
    protected javax.swing.JMenuItem allColorDialogMi;
    protected javax.swing.JCheckBoxMenuItem alwayOnTopCk;
    protected javax.swing.JMenuItem clearMi;
    protected javax.swing.JMenuItem colorDialogMi;
    protected javax.swing.JMenuItem colorFgDiologMi;
    protected javax.swing.JCheckBoxMenuItem colorViewCk;
    protected javax.swing.JComboBox columnsCb;
    protected javax.swing.JMenuItem desktopMi;
    protected javax.swing.JRadioButtonMenuItem dicTypeRa;
    protected javax.swing.JRadioButtonMenuItem enTypeRa;
    protected javax.swing.JLabel endLa;
    protected javax.swing.JTextField endStringTf;
    protected javax.swing.JComboBox exactLenCb;
    protected javax.swing.JMenuItem fontChooserMi;
    protected javax.swing.JMenu fontFaceMenu;
    protected javax.swing.ButtonGroup fontFaceRaGroup;
    protected javax.swing.JComboBox greatLenCb;
    protected javax.swing.JMenuItem helpMi;
    protected javax.swing.JMenu historyMenu;
    protected javax.swing.JButton imageBu;
    protected javax.swing.JMenuBar jMenuBar1;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JSeparator jSeparator1;
    protected javax.swing.JSeparator jSeparator2;
    protected javax.swing.JComboBox lessLenCb;
    protected javax.swing.JLabel lettersLa;
    protected javax.swing.JTextField midOrderStringTf;
    protected javax.swing.JTextField midStringTf;
    protected javax.swing.JLabel middleLa;
    protected javax.swing.ButtonGroup modeRaGroup;
    protected javax.swing.JButton newViewBu;
    protected javax.swing.JPanel normalPanel;
    protected javax.swing.JMenu optionMenu;
    protected javax.swing.JPanel optionPanel;
    protected javax.swing.JButton regBu;
    protected javax.swing.JTextField regStringTf;
    protected javax.swing.JButton regexHelpBu;
    protected javax.swing.JPanel regexPanel;
    protected javax.swing.JMenuItem resizeMi;
    protected javax.swing.JButton sentEnDicBu;
    protected javax.swing.JCheckBoxMenuItem showMiddlePanelCk;
    protected javax.swing.JButton speechBu;
    protected javax.swing.JLabel startLa;
    protected javax.swing.JTextField startStringTf;
    protected javax.swing.JButton suggestWordsBu;
    protected javax.swing.JTextField suggestWordsTf;
    protected javax.swing.JSlider taFontSizeSlider;
    protected javax.swing.JTextArea taOne;
    protected javax.swing.JSlider tfFontSizeSlider;
    protected javax.swing.JMenu typeMenu;
    protected javax.swing.JRadioButtonMenuItem usageTypeRa;
    protected javax.swing.JButton verbFormsBu;
    protected javax.swing.JRadioButtonMenuItem wikiTypeRa;
    // End of variables declaration//GEN-END:variables
}
